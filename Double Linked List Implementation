class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        new_node.prev = last

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        new_node.next = self.head
        self.head.prev = new_node
        self.head = new_node

    def insert_at_position(self, data, pos):
        if pos <= 0:
            print("Invalid position")
            return
        new_node = Node(data)
        if pos == 1:
            self.insert_at_beginning(data)
            return
        current = self.head
        for _ in range(pos - 2):
            if not current:
                print("Position out of bounds")
                return
            current = current.next
        if not current:
            print("Position out of bounds")
            return
        new_node.next = current.next
        if current.next:
            current.next.prev = new_node
        current.next = new_node
        new_node.prev = current

    def delete_at_beginning(self):
        if not self.head:
            print("List is Empty")
            return
        temp = self.head
        self.head = self.head.next
        if self.head:
            self.head.prev = None
        del temp

    def delete_by_value(self, value):
        current = self.head
        while current:
            if current.data == value:
                if current.prev:
                    current.prev.next = current.next
                if current.next:
                    current.next.prev = current.prev
                if current == self.head:
                    self.head = current.next
                del current
                return
            current = current.next
        print(f"Value {value} not found")

    def delete_by_position(self, pos):
        if pos <= 0:
            print("Invalid position")
            return
        current = self.head
        for _ in range(pos - 1):
            if not current:
                print("Position out of bounds")
                return
            current = current.next
        if not current:
            print("Position out of bounds")
            return
        if current.prev:
            current.prev.next = current.next
        if current.next:
            current.next.prev = current.prev
        if current == self.head:
            self.head = current.next
        del current

    def search(self, value):
        current = self.head
        index = 1
        while current:
            if current.data == value:
                print(f"Value {value} found at position {index}")
                return
            current = current.next
            index += 1
        print(f"Value {value} not found")

    def length(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count

    def reverse(self):
        current = self.head
        prev_node = None
        while current:
            prev_node = current.prev  # Store previous node
            current.prev = current.next  # Swap next and prev
            current.next = prev_node  # Swap pointers
            if current.prev is None:  # If it's the new head
                self.head = current
            current = current.prev  # Move backwards

    def display_forward(self):
        current = self.head
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

# Example usage
dll = DoublyLinkedList()
dll.append(10)
dll.append(20)
dll.append(30)

print("Original List:")
dll.display_forward()

dll.reverse()

print("Reversed List:")
dll.display_forward()
print("Length of the list:", dll.length())
