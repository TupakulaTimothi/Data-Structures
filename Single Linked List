class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next

class LinkedList:
    def __init__(self):
        self.head=None

    def insert_at_begining(self,data):
        node=Node(data,self.head)
        print(node)
        self.head=node

    def display(self):
        if self.head is None:
            print("List is empty")
            return
        itr=self.head
        lstr=''

        while itr:
            print(itr.next)
            lstr+=str(itr.data)+'->'
            itr=itr.next
        print(lstr)


    def insert_at_end(self,data):
        node=Node(data,None)
        if not self.head:
            self.head=node
            return
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next =node

    def insert_values(self,dl):
        self.head=None
        for i in dl:
            self.insert_at_end(i)

    def find_length(self):
        itr=self.head
        c=0
        while itr:
            c+=1
            itr=itr.next
        return c

    def remove_at_index(self,index):
        if index<0 or index>=self.find_length():
            raise Exception("Invlid Index")

        if index==0:
            self.head=self.head.next
            return

        c=0
        itr=self.head
        while itr:
            if c==index-1:
                itr.next=itr.next.next
                break
            itr=itr.next
            c+=1

    def insert_at_index(self,index,data):
        if index < 0 or index >= self.find_length():
            raise Exception("Invlid Index")
        if index==0:
            self.insert_at_begining(data)
            return

        count=0
        itr=self.head
        while itr:
            if count==index-1:
                node=Node(data,itr.next)
                itr.next=node
                break
            itr=itr.next
            count+=1

    def search(self,data):
        itr=self.head
        c=0
        while itr:
            if itr.data==data:
                print(f"{data} is found at {c} position")
                return
            c+=1
            itr=itr.next
        print(f"{data } is not found!")

if __name__=='__main__':
    l1=LinkedList()
    l1.display()
    l1.insert_values([12,43,23,87])
    l1.display()
    l1.remove_at_index(2)
    l1.display()
    l1.insert_at_index(2,20)
    l1.display()
    l1.search(43)
    print(l1.find_length())
